<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:annotation-config/>

    <!-- prerties配置文件 -->
    <bean id="propertyConfigurer" class="com.haoyun.commons.util.PropertiesUtil">
        <property name="locations">
            <list>
                <value>classpath:test_properties/*.properties</value>
               <!-- <value>classpath:test_properties/*.properties</value>-->
                <!--<valconfigties/setticonfigties</value>-->
            </list>
        </property>
    </bean>

    <bean id="spring" class="com.haoyun.commons.util.SpringContextUtil"/>

    <!-- Bean注入 -->
    <context:component-scan base-package="com.haoyun"/>

    <!-- scanner redis -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
        <property name="maxIdle" value="${redis_max_idle}"/>
        <property name="maxTotal" value="${redis_max_active}"/>
        <property name="maxWaitMillis" value="${redis_max_wait}"/>
        <property name="testOnBorrow" value="${redis_test_on_borrow}"/>
        <property name="testOnReturn" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="minEvictableIdleTimeMillis" value="30000" />
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis_ip}"
          p:port="${redis_port}"
          p:password="${redis_pass}"
          p:usePool="true">
        <!--p:poolConfig="poolConfig">-->
        <property name="poolConfig" ref="poolConfig"/>
    </bean>
    <bean id="stringSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <property name="keySerializer" ref="stringSerializer"/>
        <property name="valueSerializer" ref="stringSerializer"/>
        <!--<property name="enableTransactionSupport" value="true"/>-->
    </bean>

    <bean id="redisDao" class="com.haoyun.commons.redis.RedisDaoImpl">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <import resource="classpath*:mongo.xml"/>

    <!--配置JMS连接工厂-->
    <bean id="jmsConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <property name="brokerURL" value="${brokerURL}"/>
        <property name="userName" value="${userName}"/>
        <property name="password" value="${password}"/>
        <property name="useAsyncSend" value="true"/>
        <!--<property name="clientID" value="providerClienctConnect"/>-->
        <!--<property name="clientID" value="providerConnectHttp"/>-->
    </bean>

    <!-- 定义消息队列（Queue） 默认队列 -->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <!--<property name="physicalName" value="${consumerQueue}"/>-->
        <constructor-arg>
            <value>${consumerQueue}</value>
        </constructor-arg>
    </bean>

    <!-- 定义消息队列（Queue） 邮件发送队列-->
    <bean id="queueMail" class="org.apache.activemq.command.ActiveMQQueue">
        <!--<property name="physicalName" value="${emailQueue}"/>-->
        <constructor-arg>
            <value>${emailQueue}</value>
        </constructor-arg>
    </bean>

    <!-- 配置JMS模板（Queue），Spring提供的JMS工具类，它发送、接收消息。 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsConnectionFactory" />
        <property name="defaultDestination" ref="queueDestination" />
        <property name="receiveTimeout" value="1000" />
        <property name="sessionTransacted" value="true" />
        <property name="sessionAcknowledgeModeName" value="AUTO_ACKNOWLEDGE" />
    </bean>

    <!-- jdbc -->
    <import resource="classpath*:jdbc-config.xml"/>

</beans>